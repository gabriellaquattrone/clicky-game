{"ast":null,"code":"var _jsxFileName = \"/Users/itaquattrone/Desktop/ucd-bootcamp/clicky-game/clicky-game/src/App.js\";\n// Credit given to https://github.com/philiptd5000/clicky-game-REACT/tree/master/public for majority of help.\nimport React, { Component } from 'react';\nimport Grid from \"./components/Grid\";\nimport Paper from \"./components/Paper\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Score from \"./components/Score\";\nimport Alert from \"./components/Alert\";\nimport NavBar from \"./components/NavBar\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      characters: characters,\n      pickedChars: [],\n      topScore: 0,\n      alertMessage: \"\"\n    };\n\n    this.handlePicked = event => {\n      const name = event.target.attributes.getNamedItem(\"name\").value;\n      this.shuffleCharacters();\n      this.checkGuess(name, this.updateTopScore);\n    };\n\n    this.shuffleCharacters = () => {\n      this.setState((state, props) => {\n        return {\n          characters: this.shuffleArray(this.state.characters)\n        };\n      });\n    };\n\n    this.shuffleArray = a => {\n      let j, x, i;\n\n      for (i = a.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = a[i];\n        a[i] = a[j];\n        a[j] = x;\n      }\n\n      return a;\n    };\n\n    this.checkGuess = (name, cb) => {\n      const newState = { ...this.state\n      };\n\n      if (newState.pickedChars.includes(name)) {\n        newState.alertMessage = `You already picked \"${name}\"!`;\n        newState.pickedChars = [];\n        this.setState(state => {\n          return {\n            state: newState\n          };\n        });\n      } else {\n        newState.pickedChars.push(name);\n        newState.alertMessage = `You made it!`;\n        this.setState(this.state = newState);\n      }\n\n      cb(newState, this.alertWinner);\n    };\n\n    this.updateTopScore = (newState, cb) => {\n      if (newState.pickedChars.length > newState.topScore) {\n        newState.topScore++;\n        this.setState(this.state = newState);\n      }\n\n      cb(newState);\n    };\n\n    this.alertWinner = newState => {\n      if (newState.pickedChars.length === 12) {\n        newState.alertMessage = \"You did it! You caught them all!\";\n        newState.pickedChars = [];\n        this.setState(this.state = newState);\n      }\n    };\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82\n      },\n      __self: this\n    }, React.createElement(NavBar, {\n      style: {\n        background: \"#313133\",\n        marginBottom: \"5px\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }), React.createElement(Grid, {\n      container: true,\n      direction: \"column\",\n      style: {\n        margin: \"0 auto\",\n        maxWidth: 945\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 12,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, this.state.alertMessage === \"You made it!\" ? React.createElement(Alert, {\n      message: this.state.alertMessage,\n      style: {\n        color: \"green\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }) : React.createElement(Alert, {\n      message: this.state.alertMessage,\n      style: {\n        color: \"red\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      container: true,\n      justify: \"space-between\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      item: true,\n      lg: 6,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, React.createElement(Score, {\n      type: \"Score\",\n      score: this.state.pickedChars.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }))), React.createElement(Grid, {\n      item: true,\n      lg: 6,\n      md: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105\n      },\n      __self: this\n    }, React.createElement(Paper, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106\n      },\n      __self: this\n    }, React.createElement(Score, {\n      type: \"Top Score\",\n      score: this.state.topScore,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    }))))), React.createElement(Grid, {\n      container: true,\n      spacing: 24,\n      justify: \"center\",\n      style: {\n        maxWidth: 945,\n        margin: \"0 auto\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, this.state.characters.map(char => React.createElement(Grid, {\n      item: true,\n      lg: 3,\n      md: 3,\n      sm: 4,\n      xs: 6,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, React.createElement(CharacterCard, {\n      id: char.id,\n      name: char.name,\n      image: char.image,\n      key: char.id,\n      handlePicked: this.handlePicked,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    })))));\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/itaquattrone/Desktop/ucd-bootcamp/clicky-game/clicky-game/src/App.js"],"names":["React","Component","Grid","Paper","CharacterCard","Score","Alert","NavBar","characters","App","state","pickedChars","topScore","alertMessage","handlePicked","event","name","target","attributes","getNamedItem","value","shuffleCharacters","checkGuess","updateTopScore","setState","props","shuffleArray","a","j","x","i","length","Math","floor","random","cb","newState","includes","push","alertWinner","render","background","marginBottom","margin","maxWidth","color","map","char","id","image"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,UAAP,MAAuB,mBAAvB;;AAEA,MAAMC,GAAN,SAAkBR,SAAlB,CAA4B;AAAA;AAAA;AAAA,SAE1BS,KAF0B,GAElB;AACNF,MAAAA,UAAU,EAAEA,UADN;AAENG,MAAAA,WAAW,EAAE,EAFP;AAGNC,MAAAA,QAAQ,EAAE,CAHJ;AAINC,MAAAA,YAAY,EAAE;AAJR,KAFkB;;AAAA,SAY1BC,YAZ0B,GAYXC,KAAK,IAAI;AACtB,YAAMC,IAAI,GAAGD,KAAK,CAACE,MAAN,CAAaC,UAAb,CAAwBC,YAAxB,CAAqC,MAArC,EAA6CC,KAA1D;AACA,WAAKC,iBAAL;AACA,WAAKC,UAAL,CAAgBN,IAAhB,EAAsB,KAAKO,cAA3B;AACD,KAhByB;;AAAA,SAmB1BF,iBAnB0B,GAmBN,MAAM;AACxB,WAAKG,QAAL,CAAc,CAACd,KAAD,EAAQe,KAAR,KAAkB;AAC9B,eAAO;AAACjB,UAAAA,UAAU,EAAE,KAAKkB,YAAL,CAAkB,KAAKhB,KAAL,CAAWF,UAA7B;AAAb,SAAP;AACD,OAFD;AAGD,KAvByB;;AAAA,SA0B1BkB,YA1B0B,GA0BVC,CAAD,IAAO;AACpB,UAAIC,CAAJ,EAAOC,CAAP,EAAUC,CAAV;;AACA,WAAKA,CAAC,GAAGH,CAAC,CAACI,MAAF,GAAW,CAApB,EAAuBD,CAAC,GAAG,CAA3B,EAA8BA,CAAC,EAA/B,EAAmC;AACjCF,QAAAA,CAAC,GAAGI,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,MAAiBJ,CAAC,GAAG,CAArB,CAAX,CAAJ;AACAD,QAAAA,CAAC,GAAGF,CAAC,CAACG,CAAD,CAAL;AACAH,QAAAA,CAAC,CAACG,CAAD,CAAD,GAAOH,CAAC,CAACC,CAAD,CAAR;AACAD,QAAAA,CAAC,CAACC,CAAD,CAAD,GAAOC,CAAP;AACD;;AACD,aAAOF,CAAP;AACD,KAnCyB;;AAAA,SAqC1BL,UArC0B,GAqCb,CAACN,IAAD,EAAOmB,EAAP,KAAc;AACzB,YAAMC,QAAQ,GAAG,EAAE,GAAG,KAAK1B;AAAV,OAAjB;;AACA,UAAI0B,QAAQ,CAACzB,WAAT,CAAqB0B,QAArB,CAA8BrB,IAA9B,CAAJ,EAAyC;AACvCoB,QAAAA,QAAQ,CAACvB,YAAT,GAAyB,uBAAsBG,IAAK,IAApD;AACAoB,QAAAA,QAAQ,CAACzB,WAAT,GAAuB,EAAvB;AACA,aAAKa,QAAL,CAAed,KAAD,IAAW;AACvB,iBAAO;AAACA,YAAAA,KAAK,EAAE0B;AAAR,WAAP;AACD,SAFD;AAGD,OAND,MAMO;AACLA,QAAAA,QAAQ,CAACzB,WAAT,CAAqB2B,IAArB,CAA0BtB,IAA1B;AACAoB,QAAAA,QAAQ,CAACvB,YAAT,GAAyB,cAAzB;AACA,aAAKW,QAAL,CAAc,KAAKd,KAAL,GAAa0B,QAA3B;AACD;;AACDD,MAAAA,EAAE,CAACC,QAAD,EAAW,KAAKG,WAAhB,CAAF;AACD,KAnDyB;;AAAA,SAqD1BhB,cArD0B,GAqDT,CAACa,QAAD,EAAWD,EAAX,KAAkB;AACjC,UAAIC,QAAQ,CAACzB,WAAT,CAAqBoB,MAArB,GAA8BK,QAAQ,CAACxB,QAA3C,EAAqD;AACnDwB,QAAAA,QAAQ,CAACxB,QAAT;AACA,aAAKY,QAAL,CAAc,KAAKd,KAAL,GAAa0B,QAA3B;AACD;;AACDD,MAAAA,EAAE,CAACC,QAAD,CAAF;AACD,KA3DyB;;AAAA,SA6D1BG,WA7D0B,GA6DXH,QAAD,IAAc;AAC1B,UAAIA,QAAQ,CAACzB,WAAT,CAAqBoB,MAArB,KAAgC,EAApC,EAAwC;AACtCK,QAAAA,QAAQ,CAACvB,YAAT,GAAwB,kCAAxB;AACAuB,QAAAA,QAAQ,CAACzB,WAAT,GAAuB,EAAvB;AACA,aAAKa,QAAL,CAAc,KAAKd,KAAL,GAAa0B,QAA3B;AACD;AACF,KAnEyB;AAAA;;AAqE1BI,EAAAA,MAAM,GAAG;AACP,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,MAAD;AAAQ,MAAA,KAAK,EAAE;AAAEC,QAAAA,UAAU,EAAE,SAAd;AAAyBC,QAAAA,YAAY,EAAE;AAAvC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAGE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,SAAS,EAAC,QAA1B;AAAmC,MAAA,KAAK,EAAE;AAAEC,QAAAA,MAAM,EAAE,QAAV;AAAoBC,QAAAA,QAAQ,EAAE;AAA9B,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,EAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKlC,KAAL,CAAWG,YAAX,KAA4B,cAA5B,GACC,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAE,KAAKH,KAAL,CAAWG,YAA3B;AAAyC,MAAA,KAAK,EAAE;AAAEgC,QAAAA,KAAK,EAAE;AAAT,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADD,GAGG,oBAAC,KAAD;AAAO,MAAA,OAAO,EAAE,KAAKnC,KAAL,CAAWG,YAA3B;AAAyC,MAAA,KAAK,EAAE;AAAEgC,QAAAA,KAAK,EAAE;AAAT,OAAhD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAJN,CADF,CAFF,EAYE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAC,eAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAEE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,OAAZ;AAAoB,MAAA,KAAK,EAAE,KAAKnC,KAAL,CAAWC,WAAX,CAAuBoB,MAAlD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CAFF,EAQE,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,EAAE,EAAE,CAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,KAAD;AAAO,MAAA,IAAI,EAAC,WAAZ;AAAwB,MAAA,KAAK,EAAE,KAAKrB,KAAL,CAAWE,QAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,CADF,CARF,CAZF,CAHF,EAiCE,oBAAC,IAAD;AAAM,MAAA,SAAS,MAAf;AAAgB,MAAA,OAAO,EAAE,EAAzB;AAA6B,MAAA,OAAO,EAAC,QAArC;AAA8C,MAAA,KAAK,EAAE;AAAEgC,QAAAA,QAAQ,EAAE,GAAZ;AAAiBD,QAAAA,MAAM,EAAE;AAAzB,OAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG,KAAKjC,KAAL,CAAWF,UAAX,CAAsBsC,GAAtB,CAA0BC,IAAI,IAC7B,oBAAC,IAAD;AAAM,MAAA,IAAI,MAAV;AAAW,MAAA,EAAE,EAAE,CAAf;AAAkB,MAAA,EAAE,EAAE,CAAtB;AAAyB,MAAA,EAAE,EAAE,CAA7B;AAAgC,MAAA,EAAE,EAAE,CAApC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACA,oBAAC,aAAD;AACE,MAAA,EAAE,EAAEA,IAAI,CAACC,EADX;AAEE,MAAA,IAAI,EAAED,IAAI,CAAC/B,IAFb;AAGE,MAAA,KAAK,EAAE+B,IAAI,CAACE,KAHd;AAIE,MAAA,GAAG,EAAEF,IAAI,CAACC,EAJZ;AAKE,MAAA,YAAY,EAAE,KAAKlC,YALrB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADD,CADH,CAjCF,CADF;AAiDD;;AAvHyB;;AA0H5B,eAAeL,GAAf","sourcesContent":["// Credit given to https://github.com/philiptd5000/clicky-game-REACT/tree/master/public for majority of help.\nimport React, { Component } from 'react';\nimport Grid from \"./components/Grid\";\nimport Paper from \"./components/Paper\";\nimport CharacterCard from \"./components/CharacterCard\";\nimport Score from \"./components/Score\";\nimport Alert from \"./components/Alert\";\nimport NavBar from \"./components/NavBar\";\nimport characters from \"./characters.json\";\n\nclass App extends Component {\n\n  state = {\n    characters: characters,\n    pickedChars: [],\n    topScore: 0,\n    alertMessage: \"\"\n  }\n\n  // This function handles the item that the user picked. \n  // It runs shuffleCharacters to shuffle the characters again and checkGuess to check if the user\n  // picked a Pokemon that wasn't picked before.\n  handlePicked = event => {\n    const name = event.target.attributes.getNamedItem(\"name\").value;\n    this.shuffleCharacters()\n    this.checkGuess(name, this.updateTopScore)\n  }\n\n  // This activates the shuffle array function and shuffles the Pokemon characters.\n  shuffleCharacters = () => {\n    this.setState((state, props) => {\n      return {characters: this.shuffleArray(this.state.characters)}\n    });\n  }\n\n  // This picks a random number in order to shuffle the array.\n  shuffleArray = (a) => {\n    let j, x, i;\n    for (i = a.length - 1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = a[i];\n      a[i] = a[j];\n      a[j] = x;\n    }\n    return a;\n  }\n\n  checkGuess = (name, cb) => {\n    const newState = { ...this.state };\n    if (newState.pickedChars.includes(name)) {\n      newState.alertMessage = `You already picked \"${name}\"!`\n      newState.pickedChars = []\n      this.setState((state) => {\n        return {state: newState };\n      });\n    } else {\n      newState.pickedChars.push(name)\n      newState.alertMessage = `You made it!`\n      this.setState(this.state = newState)\n    }\n    cb(newState, this.alertWinner)\n  }\n\n  updateTopScore = (newState, cb) => {\n    if (newState.pickedChars.length > newState.topScore) {\n      newState.topScore++\n      this.setState(this.state = newState)\n    }\n    cb(newState)\n  }\n\n  alertWinner = (newState) => {\n    if (newState.pickedChars.length === 12) {\n      newState.alertMessage = \"You did it! You caught them all!\";\n      newState.pickedChars = [];\n      this.setState(this.state = newState)\n    }\n  }\n\n  render() {\n    return (\n      <div>\n        <NavBar style={{ background: \"#313133\", marginBottom: \"5px\" }} />\n\n        <Grid container direction=\"column\" style={{ margin: \"0 auto\", maxWidth: 945 }}>\n\n          <Grid item lg={12}>\n            <Paper>\n              {this.state.alertMessage === \"You made it!\" ? (\n                <Alert message={this.state.alertMessage} style={{ color: \"green\" }} />\n              ) : (\n                  <Alert message={this.state.alertMessage} style={{ color: \"red\" }} />\n                )}\n            </Paper>\n          </Grid>\n\n          <Grid container justify=\"space-between\">\n\n            <Grid item lg={6} md={6}>\n              <Paper>\n                <Score type=\"Score\" score={this.state.pickedChars.length} />\n              </Paper>\n            </Grid>\n\n            <Grid item lg={6} md={6}>\n              <Paper>\n                <Score type=\"Top Score\" score={this.state.topScore} />\n              </Paper>\n            </Grid>\n\n          </Grid>\n\n        </Grid>\n\n        <Grid container spacing={24} justify=\"center\" style={{ maxWidth: 945, margin: \"0 auto\" }}>\n          {this.state.characters.map(char => (\n            <Grid item lg={3} md={3} sm={4} xs={6}>\n            <CharacterCard\n              id={char.id}\n              name={char.name}\n              image={char.image}\n              key={char.id}\n              handlePicked={this.handlePicked}\n            />\n            </Grid>\n          ))}\n        </Grid>\n      </div>\n    )\n  }\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}